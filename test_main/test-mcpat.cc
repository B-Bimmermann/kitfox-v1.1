#include <iostream>
#include "kitfox.h"

using namespace std;
using namespace libconfig;
using namespace libKitFox;

struct power_component {
    Comp_ID id;
    power_t power;
    dimension_t dimension;
    counter_t counter;
};

struct core_component : public power_component {
    power_component icache, icacheMissBuffer, icacheFillBuffer, icachePrefetchBuffer;
    power_component InstBuffer, BranchTargetBuffer;
    power_component ID_inst, ID_operand, ID_misc;
    power_component GlobalPredictor, L1LocalPredictor, L2LocalPredictor, PredictorChooser;
    power_component RAS, InstIssueQueue, FPIssueQueue, ReorderBuffer;
    power_component instruction_selection, IntegerRegisterFile, FloatingPointRegisterFile;
    power_component exeu, IntBypassData, IntBypassTag;
    power_component mul, MulBypassData, MulBypassTag;
    power_component fp_u, FPBypassData, FPBypassTag;
    power_component IntFrontRAT, FPFrontRAT, IntRetireRAT, FPRetireRAT;
    power_component IntFreeList, FPFreeList, idcl, fdcl;
    power_component dcache, dcacheMissBuffer, dcacheFillBuffer, dcachePrefetchBuffer, dcacheWBB;
    power_component StoreQueue, LoadQueue, ITLB, DTLB;
    power_component undiffCore, corepipe;
    power_component L2cache, L2MissB, L2FillB, L2PrefetchB, L2WBB;
};

struct llc_component : public power_component {
    power_component L3cache, L3MissB, L3FillB, L3PrefetchB, L3WBB;
};

int main(int argc, char **argv) {
    printf("Processing McPAT test using config/mcpat.config ... \n");
    printf("Initialization takes time. Please, wait ... \n");

    // Initialize KitFox
    kitfox_t *kitfox = new kitfox_t();
    kitfox->configure((char*)"config/mcpat.config");

    // Get pseudo component IDs
    core_component core0;
    llc_component L3;

    core0.id = kitfox->get_component_id("package.core0");
    core0.icache.id = kitfox->get_component_id("package.core0.icache");
    core0.icacheMissBuffer.id = kitfox->get_component_id("package.core0.icacheMissBuffer");
    core0.icacheFillBuffer.id = kitfox->get_component_id("package.core0.icacheFillBuffer");
    core0.icachePrefetchBuffer.id = kitfox->get_component_id("package.core0.icachePrefetchBuffer");
    core0.InstBuffer.id = kitfox->get_component_id("package.core0.InstBuffer");
    core0.BranchTargetBuffer.id = kitfox->get_component_id("package.core0.BranchTargetBuffer");
    core0.ID_inst.id = kitfox->get_component_id("package.core0.ID_inst");
    core0.ID_operand.id = kitfox->get_component_id("package.core0.ID_operand");
    core0.ID_misc.id = kitfox->get_component_id("package.core0.ID_misc");
    core0.GlobalPredictor.id = kitfox->get_component_id("package.core0.GlobalPredictor");
    core0.L1LocalPredictor.id = kitfox->get_component_id("package.core0.L1LocalPredictor");
    core0.L2LocalPredictor.id = kitfox->get_component_id("package.core0.L2LocalPredictor");
    core0.PredictorChooser.id = kitfox->get_component_id("package.core0.PredictorChooser");
    core0.RAS.id = kitfox->get_component_id("package.core0.RAS");
    core0.InstIssueQueue.id = kitfox->get_component_id("package.core0.InstIssueQueue");
    core0.FPIssueQueue.id = kitfox->get_component_id("package.core0.FPIssueQueue");
    core0.ReorderBuffer.id = kitfox->get_component_id("package.core0.ReorderBuffer");
    core0.instruction_selection.id = kitfox->get_component_id("package.core0.instruction_selection");
    core0.IntegerRegisterFile.id = kitfox->get_component_id("package.core0.IntegerRegisterFile");
    core0.FloatingPointRegisterFile.id = kitfox->get_component_id("package.core0.FloatingPointRegisterFile");
    core0.exeu.id = kitfox->get_component_id("package.core0.exeu");
    core0.fp_u.id = kitfox->get_component_id("package.core0.fp_u");
    core0.mul.id = kitfox->get_component_id("package.core0.mul");
    core0.IntBypassData.id = kitfox->get_component_id("package.core0.IntBypassData");
    core0.IntBypassTag.id = kitfox->get_component_id("package.core0.IntBypassTag");
    core0.MulBypassData.id = kitfox->get_component_id("package.core0.MulBypassData");
    core0.MulBypassTag.id = kitfox->get_component_id("package.core0.MulBypassTag");
    core0.FPBypassData.id = kitfox->get_component_id("package.core0.FPBypassData");
    core0.FPBypassTag.id = kitfox->get_component_id("package.core0.FPBypassTag");
    core0.IntFrontRAT.id = kitfox->get_component_id("package.core0.IntFrontRAT");
    core0.FPFrontRAT.id = kitfox->get_component_id("package.core0.FPFrontRAT");
    core0.IntRetireRAT.id = kitfox->get_component_id("package.core0.IntRetireRAT");
    core0.FPRetireRAT.id = kitfox->get_component_id("package.core0.FPRetireRAT");
    core0.IntFreeList.id = kitfox->get_component_id("package.core0.IntFreeList");
    core0.FPFreeList.id = kitfox->get_component_id("package.core0.FPFreeList");
    core0.idcl.id = kitfox->get_component_id("package.core0.idcl");
    core0.fdcl.id = kitfox->get_component_id("package.core0.fdcl");
    core0.dcache.id = kitfox->get_component_id("package.core0.dcache");
    core0.dcacheMissBuffer.id = kitfox->get_component_id("package.core0.dcacheMissBuffer");
    core0.dcacheFillBuffer.id = kitfox->get_component_id("package.core0.dcacheFillBuffer");
    core0.dcachePrefetchBuffer.id = kitfox->get_component_id("package.core0.dcachePrefetchBuffer");
    core0.dcacheWBB.id = kitfox->get_component_id("package.core0.dcacheWBB");
    core0.StoreQueue.id = kitfox->get_component_id("package.core0.StoreQueue");
    core0.LoadQueue.id = kitfox->get_component_id("package.core0.LoadQueue");
    core0.ITLB.id = kitfox->get_component_id("package.core0.ITLB");
    core0.DTLB.id = kitfox->get_component_id("package.core0.DTLB");
    core0.undiffCore.id = kitfox->get_component_id("package.core0.undiffCore");
    core0.corepipe.id = kitfox->get_component_id("package.core0.corepipe");
    core0.L2cache.id = kitfox->get_component_id("package.core0.L2cache");
    core0.L2MissB.id = kitfox->get_component_id("package.core0.L2MissB");
    core0.L2FillB.id = kitfox->get_component_id("package.core0.L2FillB");
    core0.L2PrefetchB.id = kitfox->get_component_id("package.core0.L2PrefetchB");
    core0.L2WBB.id = kitfox->get_component_id("package.core0.L2WBB");
    L3.id = kitfox->get_component_id("package.L3");
    L3.L3cache.id = kitfox->get_component_id("package.L3.L3cache");
    L3.L3MissB.id = kitfox->get_component_id("package.L3.L3MissB");
    L3.L3FillB.id = kitfox->get_component_id("package.L3.L3FillB");
    L3.L3PrefetchB.id = kitfox->get_component_id("package.L3.L3PrefetchB");
    L3.L3WBB.id = kitfox->get_component_id("package.L3.L3WBB");

    assert(core0.id != INVALID_COMP_ID);
    assert(core0.icache.id != INVALID_COMP_ID);
    assert(core0.icacheMissBuffer.id != INVALID_COMP_ID);
    assert(core0.icacheFillBuffer.id != INVALID_COMP_ID);
    assert(core0.icachePrefetchBuffer.id != INVALID_COMP_ID);
    assert(core0.InstBuffer.id != INVALID_COMP_ID);
    assert(core0.BranchTargetBuffer.id != INVALID_COMP_ID);
    assert(core0.ID_inst.id != INVALID_COMP_ID);
    assert(core0.ID_operand.id != INVALID_COMP_ID);
    assert(core0.ID_misc.id != INVALID_COMP_ID);
    assert(core0.GlobalPredictor.id != INVALID_COMP_ID);
    assert(core0.L1LocalPredictor.id != INVALID_COMP_ID);
    assert(core0.L2LocalPredictor.id != INVALID_COMP_ID);
    assert(core0.PredictorChooser.id != INVALID_COMP_ID);
    assert(core0.RAS.id != INVALID_COMP_ID);
    assert(core0.InstIssueQueue.id != INVALID_COMP_ID);
    assert(core0.FPIssueQueue.id != INVALID_COMP_ID);
    assert(core0.ReorderBuffer.id != INVALID_COMP_ID);
    assert(core0.instruction_selection.id != INVALID_COMP_ID);
    assert(core0.IntegerRegisterFile.id != INVALID_COMP_ID);
    assert(core0.FloatingPointRegisterFile.id != INVALID_COMP_ID);
    assert(core0.exeu.id != INVALID_COMP_ID);
    assert(core0.fp_u.id != INVALID_COMP_ID);
    assert(core0.mul.id != INVALID_COMP_ID);
    assert(core0.IntBypassData.id != INVALID_COMP_ID);
    assert(core0.IntBypassTag.id != INVALID_COMP_ID);
    assert(core0.MulBypassData.id != INVALID_COMP_ID);
    assert(core0.MulBypassTag.id != INVALID_COMP_ID);
    assert(core0.FPBypassData.id != INVALID_COMP_ID);
    assert(core0.FPBypassTag.id != INVALID_COMP_ID);
    assert(core0.IntFrontRAT.id != INVALID_COMP_ID);
    assert(core0.FPFrontRAT.id != INVALID_COMP_ID);
    assert(core0.IntRetireRAT.id != INVALID_COMP_ID);
    assert(core0.FPRetireRAT.id != INVALID_COMP_ID);
    assert(core0.IntFreeList.id != INVALID_COMP_ID);
    assert(core0.FPFreeList.id != INVALID_COMP_ID);
    assert(core0.idcl.id != INVALID_COMP_ID);
    assert(core0.fdcl.id != INVALID_COMP_ID);
    assert(core0.dcache.id != INVALID_COMP_ID);
    assert(core0.dcacheMissBuffer.id != INVALID_COMP_ID);
    assert(core0.dcacheFillBuffer.id != INVALID_COMP_ID);
    assert(core0.dcachePrefetchBuffer.id != INVALID_COMP_ID);
    assert(core0.dcacheWBB.id != INVALID_COMP_ID);
    assert(core0.StoreQueue.id != INVALID_COMP_ID);
    assert(core0.LoadQueue.id != INVALID_COMP_ID);
    assert(core0.ITLB.id != INVALID_COMP_ID);
    assert(core0.DTLB.id != INVALID_COMP_ID);
    assert(core0.undiffCore.id != INVALID_COMP_ID);
    assert(core0.corepipe.id != INVALID_COMP_ID);
    assert(core0.L2cache.id != INVALID_COMP_ID);
    assert(core0.L2MissB.id != INVALID_COMP_ID);
    assert(core0.L2FillB.id != INVALID_COMP_ID);
    assert(core0.L2PrefetchB.id != INVALID_COMP_ID);
    assert(core0.L2WBB.id != INVALID_COMP_ID);
    assert(L3.L3cache.id != INVALID_COMP_ID);
    assert(L3.L3MissB.id != INVALID_COMP_ID);
    assert(L3.L3FillB.id != INVALID_COMP_ID);
    assert(L3.L3PrefetchB.id != INVALID_COMP_ID);
    assert(L3.L3WBB.id != INVALID_COMP_ID);

    // Some fake counters for testing
    Hertz clock_frequency = 3.4e9;
    Hertz uncore_clock = 850e6;
    core0.icache.counter.read = (Count)clock_frequency;
    core0.icacheMissBuffer.counter.search = (Count)clock_frequency;
    core0.icacheMissBuffer.counter.write = (Count)clock_frequency;
    core0.icacheFillBuffer.counter.search = (Count)clock_frequency;
    core0.icacheFillBuffer.counter.write = (Count)clock_frequency;
    core0.icachePrefetchBuffer.counter.search = (Count)clock_frequency;
    core0.icachePrefetchBuffer.counter.write = (Count)clock_frequency;
    core0.InstBuffer.counter.read = 6*(Count)clock_frequency; 
    core0.InstBuffer.counter.write = 6*(Count)clock_frequency;
    core0.BranchTargetBuffer.counter.read = (Count)clock_frequency;
    core0.ID_inst.counter.switching = 4*(Count)clock_frequency;
    core0.ID_operand.counter.switching = 4*(Count)clock_frequency;
    core0.ID_misc.counter.switching = 4*(Count)clock_frequency;
    core0.GlobalPredictor.counter.read = (Count)clock_frequency;
    core0.L1LocalPredictor.counter.read = (Count)clock_frequency;
    core0.L2LocalPredictor.counter.read = (Count)clock_frequency;
    core0.PredictorChooser.counter.read = (Count)clock_frequency;
    core0.RAS.counter.read = (Count)clock_frequency;
    core0.InstIssueQueue.counter.read = 4*(Count)clock_frequency;
    core0.InstIssueQueue.counter.write = 4*(Count)clock_frequency;
    core0.InstIssueQueue.counter.search = 4*(Count)clock_frequency;
    core0.FPIssueQueue.counter.read = 2*(Count)clock_frequency;
    core0.FPIssueQueue.counter.write = 2*(Count)clock_frequency;
    core0.FPIssueQueue.counter.search = 2*(Count)clock_frequency;
    core0.instruction_selection.counter.switching = 6*(Count)clock_frequency;
    core0.ReorderBuffer.counter.read = 4*(Count)clock_frequency;
    core0.ReorderBuffer.counter.write = 4*(Count)clock_frequency;
    core0.IntegerRegisterFile.counter.read = (Count)(11.2*clock_frequency);
    core0.IntegerRegisterFile.counter.write = (Count)(5.6*clock_frequency);
    core0.FloatingPointRegisterFile.counter.read = (Count)(2.52*clock_frequency);
    core0.FloatingPointRegisterFile.counter.write = (Count)(1.26*clock_frequency);
    core0.exeu.counter.switching = 6*(Count)clock_frequency;
    core0.fp_u.counter.switching = 2*(Count)(clock_frequency*0.3);
    core0.mul.counter.switching = 1*(Count)(clock_frequency*0.3);
    core0.IntBypassData.counter.switching = 2*(Count)clock_frequency;
    core0.IntBypassTag.counter.switching = 2*(Count)clock_frequency;
    core0.MulBypassData.counter.switching = 2*(Count)(clock_frequency*0.3);
    core0.MulBypassTag.counter.switching = 2*(Count)(clock_frequency*0.3);
    core0.FPBypassData.counter.switching = 3*(Count)(clock_frequency*0.3);
    core0.FPBypassTag.counter.switching = 3*(Count)(clock_frequency*0.3);
    core0.IntFrontRAT.counter.read = 8*(Count)clock_frequency;
    core0.IntFrontRAT.counter.write = 4*(Count)clock_frequency;
    core0.idcl.counter.switching = 8*(Count)clock_frequency;
    core0.FPFrontRAT.counter.read = 4*(Count)clock_frequency;
    core0.FPFrontRAT.counter.write= 2*(Count)clock_frequency;
    core0.fdcl.counter.switching = 4*(Count)clock_frequency;
    core0.IntRetireRAT.counter.read = 4*(Count)clock_frequency;
    core0.IntRetireRAT.counter.write = 4*(Count)clock_frequency;
    core0.FPRetireRAT.counter.read = 2*(Count)clock_frequency;
    core0.FPRetireRAT.counter.write = 2*(Count)clock_frequency;
    core0.IntFreeList.counter.read = 4*(Count)clock_frequency;
    core0.IntFreeList.counter.write = 4*(Count)clock_frequency;
    core0.FPFreeList.counter.read = 4*(Count)clock_frequency;
    core0.FPFreeList.counter.write = 4*(Count)clock_frequency;
    core0.dcache.counter.read = (Count)clock_frequency*0.67;
    core0.dcache.counter.write = (Count)clock_frequency*0.33;
    core0.dcacheMissBuffer.counter.search = 2*(Count)clock_frequency;
    core0.dcacheMissBuffer.counter.write = 2*(Count)clock_frequency;
    core0.dcacheFillBuffer.counter.search = 2*(Count)clock_frequency;
    core0.dcacheFillBuffer.counter.write = 2*(Count)clock_frequency;
    core0.dcachePrefetchBuffer.counter.search = 2*(Count)clock_frequency;
    core0.dcachePrefetchBuffer.counter.write = 2*(Count)clock_frequency;
    core0.dcacheWBB.counter.search = 2*(Count)clock_frequency;
    core0.dcacheWBB.counter.write = 2*(Count)clock_frequency;
    core0.StoreQueue.counter.search = 2*(Count)(clock_frequency*0.5);
    core0.StoreQueue.counter.read = 2*(Count)(clock_frequency*0.5);
    core0.StoreQueue.counter.write = 2*(Count)(clock_frequency*0.5);
    core0.LoadQueue.counter.search = 2*(Count)(clock_frequency*0.5);
    core0.LoadQueue.counter.read = 2*(Count)(clock_frequency*0.5);
    core0.LoadQueue.counter.write = 2*(Count)(clock_frequency*0.5);
    core0.ITLB.counter.search = (Count)clock_frequency;
    core0.DTLB.counter.search = 2*(Count)(clock_frequency*0.5);
    core0.undiffCore.counter.switching = (Count)clock_frequency;
    core0.corepipe.counter.switching = (Count)((0.2+0.2+0.1+0.2+0.15)*clock_frequency);
    core0.L2cache.counter.read = (Count)clock_frequency*0.67;
    core0.L2cache.counter.write = (Count)clock_frequency*0.33;
    core0.L2MissB.counter.search = (Count)clock_frequency;
    core0.L2MissB.counter.write = (Count)clock_frequency;
    core0.L2FillB.counter.search = (Count)clock_frequency;
    core0.L2FillB.counter.write = (Count)clock_frequency;
    core0.L2PrefetchB.counter.search = (Count)clock_frequency;
    core0.L2PrefetchB.counter.write = (Count)clock_frequency;
    core0.L2WBB.counter.search = (Count)clock_frequency;
    core0.L2WBB.counter.write = (Count)clock_frequency;
    L3.L3cache.counter.read = (Count)uncore_clock*0.67;
    L3.L3cache.counter.write = (Count)uncore_clock*0.33;
    L3.L3MissB.counter.search = (Count)uncore_clock;
    L3.L3MissB.counter.write = (Count)uncore_clock;
    L3.L3FillB.counter.search = (Count)uncore_clock;
    L3.L3FillB.counter.write = (Count)uncore_clock;
    L3.L3PrefetchB.counter.search = (Count)uncore_clock;
    L3.L3PrefetchB.counter.write = (Count)uncore_clock;
    L3.L3WBB.counter.search = (Count)uncore_clock;
    L3.L3WBB.counter.write = (Count)uncore_clock;

    Second sampling_interval = 1.0;
    Second current_time = sampling_interval;

    // Calculate power
    kitfox->calculate_power(core0.icache.id, current_time, sampling_interval, core0.icache.counter);
    kitfox->calculate_power(core0.icacheMissBuffer.id, current_time, sampling_interval, core0.icacheMissBuffer.counter);
    kitfox->calculate_power(core0.icacheFillBuffer.id, current_time, sampling_interval, core0.icacheFillBuffer.counter);
    kitfox->calculate_power(core0.icachePrefetchBuffer.id, current_time, sampling_interval, core0.icachePrefetchBuffer.counter);
    kitfox->calculate_power(core0.InstBuffer.id, current_time, sampling_interval, core0.InstBuffer.counter);
    kitfox->calculate_power(core0.BranchTargetBuffer.id, current_time, sampling_interval, core0.BranchTargetBuffer.counter);
    kitfox->calculate_power(core0.ID_inst.id, current_time, sampling_interval, core0.ID_inst.counter);
    kitfox->calculate_power(core0.ID_operand.id, current_time, sampling_interval, core0.ID_operand.counter);
    kitfox->calculate_power(core0.ID_misc.id, current_time, sampling_interval, core0.ID_misc.counter);
    kitfox->calculate_power(core0.GlobalPredictor.id, current_time, sampling_interval, core0.GlobalPredictor.counter);
    kitfox->calculate_power(core0.L1LocalPredictor.id, current_time, sampling_interval, core0.L1LocalPredictor.counter);
    kitfox->calculate_power(core0.L2LocalPredictor.id, current_time, sampling_interval, core0.L2LocalPredictor.counter);
    kitfox->calculate_power(core0.PredictorChooser.id, current_time, sampling_interval, core0.PredictorChooser.counter);
    kitfox->calculate_power(core0.RAS.id, current_time, sampling_interval, core0.RAS.counter);
    kitfox->calculate_power(core0.InstIssueQueue.id, current_time, sampling_interval, core0.InstIssueQueue.counter);
    kitfox->calculate_power(core0.FPIssueQueue.id, current_time, sampling_interval, core0.FPIssueQueue.counter);
    kitfox->calculate_power(core0.instruction_selection.id, current_time, sampling_interval, core0.instruction_selection.counter);
    kitfox->calculate_power(core0.ReorderBuffer.id, current_time, sampling_interval, core0.ReorderBuffer.counter);
    kitfox->calculate_power(core0.IntegerRegisterFile.id, current_time, sampling_interval, core0.IntegerRegisterFile.counter);
    kitfox->calculate_power(core0.FloatingPointRegisterFile.id, current_time, sampling_interval, core0.FloatingPointRegisterFile.counter);
    kitfox->calculate_power(core0.exeu.id, current_time, sampling_interval, core0.exeu.counter);
    kitfox->calculate_power(core0.fp_u.id, current_time, sampling_interval, core0.fp_u.counter);
    kitfox->calculate_power(core0.mul.id, current_time, sampling_interval, core0.mul.counter);
    kitfox->calculate_power(core0.IntBypassData.id, current_time, sampling_interval, core0.IntBypassData.counter);
    kitfox->calculate_power(core0.IntBypassTag.id, current_time, sampling_interval, core0.IntBypassTag.counter);
    kitfox->calculate_power(core0.MulBypassData.id, current_time, sampling_interval, core0.MulBypassData.counter);
    kitfox->calculate_power(core0.MulBypassTag.id, current_time, sampling_interval, core0.MulBypassTag.counter);
    kitfox->calculate_power(core0.FPBypassData.id, current_time, sampling_interval, core0.FPBypassData.counter);
    kitfox->calculate_power(core0.FPBypassTag.id, current_time, sampling_interval, core0.FPBypassTag.counter);
    kitfox->calculate_power(core0.IntFrontRAT.id, current_time, sampling_interval, core0.IntFrontRAT.counter);
    kitfox->calculate_power(core0.idcl.id, current_time, sampling_interval, core0.idcl.counter);
    kitfox->calculate_power(core0.FPFrontRAT.id, current_time, sampling_interval, core0.FPFrontRAT.counter);
    kitfox->calculate_power(core0.fdcl.id, current_time, sampling_interval, core0.fdcl.counter);
    kitfox->calculate_power(core0.IntRetireRAT.id, current_time, sampling_interval, core0.IntRetireRAT.counter);
    kitfox->calculate_power(core0.FPRetireRAT.id, current_time, sampling_interval, core0.FPRetireRAT.counter);
    kitfox->calculate_power(core0.IntFreeList.id, current_time, sampling_interval, core0.IntFreeList.counter);
    kitfox->calculate_power(core0.FPFreeList.id, current_time, sampling_interval, core0.FPFreeList.counter);
    kitfox->calculate_power(core0.dcache.id, current_time, sampling_interval, core0.dcache.counter);
    kitfox->calculate_power(core0.dcacheMissBuffer.id, current_time, sampling_interval, core0.dcacheMissBuffer.counter);
    kitfox->calculate_power(core0.dcacheFillBuffer.id, current_time, sampling_interval, core0.dcacheFillBuffer.counter);
    kitfox->calculate_power(core0.dcachePrefetchBuffer.id, current_time, sampling_interval, core0.dcachePrefetchBuffer.counter);
    kitfox->calculate_power(core0.dcacheWBB.id, current_time, sampling_interval, core0.dcacheWBB.counter);
    kitfox->calculate_power(core0.StoreQueue.id, current_time, sampling_interval, core0.StoreQueue.counter);
    kitfox->calculate_power(core0.LoadQueue.id, current_time, sampling_interval, core0.LoadQueue.counter);
    kitfox->calculate_power(core0.ITLB.id, current_time, sampling_interval, core0.ITLB.counter);
    kitfox->calculate_power(core0.DTLB.id, current_time, sampling_interval, core0.DTLB.counter);
    kitfox->calculate_power(core0.undiffCore.id, current_time, sampling_interval, core0.undiffCore.counter);
    kitfox->calculate_power(core0.corepipe.id, current_time, sampling_interval, core0.corepipe.counter);
    kitfox->calculate_power(core0.L2cache.id, current_time, sampling_interval, core0.L2cache.counter);
    kitfox->calculate_power(core0.L2MissB.id, current_time, sampling_interval, core0.L2MissB.counter);
    kitfox->calculate_power(core0.L2FillB.id, current_time, sampling_interval, core0.L2FillB.counter);
    kitfox->calculate_power(core0.L2PrefetchB.id, current_time, sampling_interval, core0.L2PrefetchB.counter);
    kitfox->calculate_power(core0.L2WBB.id, current_time, sampling_interval, core0.L2WBB.counter);
    kitfox->synchronize_data(core0.id, current_time, sampling_interval, KITFOX_DATA_POWER);
    kitfox->calculate_power(L3.L3cache.id, current_time, sampling_interval, L3.L3cache.counter);
    kitfox->calculate_power(L3.L3MissB.id, current_time, sampling_interval, L3.L3MissB.counter);
    kitfox->calculate_power(L3.L3FillB.id, current_time, sampling_interval, L3.L3FillB.counter);
    kitfox->calculate_power(L3.L3PrefetchB.id, current_time, sampling_interval, L3.L3PrefetchB.counter);
    kitfox->calculate_power(L3.L3WBB.id, current_time, sampling_interval, L3.L3WBB.counter);
    kitfox->synchronize_data(L3.id, current_time, sampling_interval, KITFOX_DATA_POWER);

    assert(kitfox->pull_data(core0.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icache.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.icache.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icacheMissBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.icacheMissBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icacheFillBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.icacheFillBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icachePrefetchBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.icachePrefetchBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.InstBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.InstBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.BranchTargetBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.BranchTargetBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_inst.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.ID_inst.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_operand.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.ID_operand.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_misc.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.ID_misc.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.GlobalPredictor.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.GlobalPredictor.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L1LocalPredictor.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L1LocalPredictor.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2LocalPredictor.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2LocalPredictor.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.PredictorChooser.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.PredictorChooser.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.RAS.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.RAS.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.InstIssueQueue.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.InstIssueQueue.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPIssueQueue.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPIssueQueue.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.instruction_selection.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.instruction_selection.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ReorderBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.ReorderBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntegerRegisterFile.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntegerRegisterFile.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FloatingPointRegisterFile.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FloatingPointRegisterFile.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.exeu.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.exeu.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.fp_u.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.fp_u.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.mul.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.mul.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntBypassData.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntBypassData.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntBypassTag.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntBypassTag.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.MulBypassData.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.MulBypassData.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.MulBypassTag.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.MulBypassTag.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPBypassData.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPBypassData.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPBypassTag.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPBypassTag.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntFrontRAT.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntFrontRAT.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.idcl.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.idcl.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPFrontRAT.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPFrontRAT.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.fdcl.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.fdcl.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntRetireRAT.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntRetireRAT.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPRetireRAT.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPRetireRAT.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntFreeList.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.IntFreeList.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPFreeList.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.FPFreeList.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcache.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dcache.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheMissBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dcacheMissBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheFillBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dcacheFillBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcachePrefetchBuffer.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dcachePrefetchBuffer.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheWBB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.dcacheWBB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.StoreQueue.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.StoreQueue.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.LoadQueue.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.LoadQueue.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ITLB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.ITLB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.DTLB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.DTLB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.undiffCore.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.undiffCore.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.corepipe.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.corepipe.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2cache.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2cache.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2MissB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2MissB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2FillB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2FillB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2PrefetchB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2PrefetchB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2WBB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &core0.L2WBB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3cache.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.L3cache.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3MissB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.L3MissB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3FillB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.L3FillB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3PrefetchB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.L3PrefetchB.dimension) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3WBB.id, current_time, sampling_interval, KITFOX_DATA_DIMENSION, &L3.L3WBB.dimension) == KITFOX_QUEUE_ERROR_NONE);

    assert(kitfox->pull_data(core0.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icache.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.icache.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icacheMissBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.icacheMissBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icacheFillBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.icacheFillBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.icachePrefetchBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.icachePrefetchBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.InstBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.InstBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.BranchTargetBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.BranchTargetBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_inst.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.ID_inst.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_operand.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.ID_operand.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ID_misc.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.ID_misc.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.GlobalPredictor.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.GlobalPredictor.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L1LocalPredictor.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L1LocalPredictor.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2LocalPredictor.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2LocalPredictor.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.PredictorChooser.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.PredictorChooser.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.RAS.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.RAS.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.InstIssueQueue.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.InstIssueQueue.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPIssueQueue.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPIssueQueue.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.instruction_selection.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.instruction_selection.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ReorderBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.ReorderBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntegerRegisterFile.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntegerRegisterFile.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FloatingPointRegisterFile.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FloatingPointRegisterFile.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.exeu.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.exeu.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.fp_u.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.fp_u.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.mul.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.mul.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.mul.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.mul.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntBypassData.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntBypassData.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntBypassTag.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntBypassTag.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.MulBypassData.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.MulBypassData.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.MulBypassTag.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.MulBypassTag.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPBypassData.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPBypassData.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPBypassTag.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPBypassTag.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntFrontRAT.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntFrontRAT.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.idcl.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.idcl.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPFrontRAT.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPFrontRAT.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.fdcl.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.fdcl.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntRetireRAT.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntRetireRAT.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPRetireRAT.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPRetireRAT.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.IntFreeList.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.IntFreeList.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.FPFreeList.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.FPFreeList.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcache.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.dcache.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheMissBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.dcacheMissBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheFillBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.dcacheFillBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcachePrefetchBuffer.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.dcachePrefetchBuffer.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.dcacheWBB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.dcacheWBB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.StoreQueue.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.StoreQueue.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.LoadQueue.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.LoadQueue.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.ITLB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.ITLB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.DTLB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.DTLB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.undiffCore.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.undiffCore.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.corepipe.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.corepipe.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2cache.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2cache.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2MissB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2MissB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2FillB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2FillB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2PrefetchB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2PrefetchB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(core0.L2WBB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &core0.L2WBB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3cache.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.L3cache.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3MissB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.L3MissB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3FillB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.L3FillB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3PrefetchB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.L3PrefetchB.power) == KITFOX_QUEUE_ERROR_NONE);
    assert(kitfox->pull_data(L3.L3WBB.id, current_time, sampling_interval, KITFOX_DATA_POWER, &L3.L3WBB.power) == KITFOX_QUEUE_ERROR_NONE);

    printf("core0.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.power.get_total(), core0.power.dynamic, core0.power.leakage, core0.dimension.get_area()*1e6);
    printf("core0.icache.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.icache.power.get_total(), core0.icache.power.dynamic, core0.icache.power.leakage, core0.icache.dimension.get_area()*1e6);
    printf("core0.icacheMissBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.icacheMissBuffer.power.get_total(), core0.icacheMissBuffer.power.dynamic, core0.icacheMissBuffer.power.leakage, core0.icacheMissBuffer.dimension.get_area()*1e6);
    printf("core0.icacheFillBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.icacheFillBuffer.power.get_total(), core0.icacheFillBuffer.power.dynamic, core0.icacheFillBuffer.power.leakage, core0.icacheFillBuffer.dimension.get_area()*1e6);
    printf("core0.icachePrefetchBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.icachePrefetchBuffer.power.get_total(), core0.icachePrefetchBuffer.power.dynamic, core0.icachePrefetchBuffer.power.leakage, core0.icachePrefetchBuffer.dimension.get_area()*1e6);
    printf("core0.InstBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.InstBuffer.power.get_total(), core0.InstBuffer.power.dynamic, core0.InstBuffer.power.leakage, core0.InstBuffer.dimension.get_area()*1e6);
    printf("core0.BranchTargetBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.BranchTargetBuffer.power.get_total(), core0.BranchTargetBuffer.power.dynamic, core0.BranchTargetBuffer.power.leakage, core0.BranchTargetBuffer.dimension.get_area()*1e6);
    printf("core0.ID_inst.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.ID_inst.power.get_total(), core0.ID_inst.power.dynamic, core0.ID_inst.power.leakage, core0.ID_inst.dimension.get_area()*1e6);
    printf("core0.ID_operand.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.ID_operand.power.get_total(), core0.ID_operand.power.dynamic, core0.ID_operand.power.leakage, core0.ID_operand.dimension.get_area()*1e6);
    printf("core0.ID_misc.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.ID_misc.power.get_total(), core0.ID_misc.power.dynamic, core0.ID_misc.power.leakage, core0.ID_misc.dimension.get_area()*1e6);
    printf("core0.GlobalPredictor.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.GlobalPredictor.power.get_total(), core0.GlobalPredictor.power.dynamic, core0.GlobalPredictor.power.leakage, core0.GlobalPredictor.dimension.get_area()*1e6);
    printf("core0.L1LocalPredictor.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L1LocalPredictor.power.get_total(), core0.L1LocalPredictor.power.dynamic, core0.L1LocalPredictor.power.leakage, core0.L1LocalPredictor.dimension.get_area()*1e6);
    printf("core0.L2LocalPredictor.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2LocalPredictor.power.get_total(), core0.L2LocalPredictor.power.dynamic, core0.L2LocalPredictor.power.leakage, core0.L2LocalPredictor.dimension.get_area()*1e6);
    printf("core0.PredictorChooser.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.PredictorChooser.power.get_total(), core0.PredictorChooser.power.dynamic, core0.PredictorChooser.power.leakage, core0.PredictorChooser.dimension.get_area()*1e6);
    printf("core0.RAS.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.RAS.power.get_total(), core0.RAS.power.dynamic, core0.RAS.power.leakage, core0.RAS.dimension.get_area()*1e6);
    printf("core0.InstIssueQueue.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.InstIssueQueue.power.get_total(), core0.InstIssueQueue.power.dynamic, core0.InstIssueQueue.power.leakage, core0.InstIssueQueue.dimension.get_area()*1e6);
    printf("core0.FPIssueQueue.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPIssueQueue.power.get_total(), core0.FPIssueQueue.power.dynamic, core0.FPIssueQueue.power.leakage, core0.FPIssueQueue.dimension.get_area()*1e6);
    printf("core0.instruction_selection.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.instruction_selection.power.get_total(), core0.instruction_selection.power.dynamic, core0.instruction_selection.power.leakage, core0.instruction_selection.dimension.get_area()*1e6);
    printf("core0.ReorderBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.ReorderBuffer.power.get_total(), core0.ReorderBuffer.power.dynamic, core0.ReorderBuffer.power.leakage, core0.ReorderBuffer.dimension.get_area()*1e6);
    printf("core0.IntegerRegisterFile.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntegerRegisterFile.power.get_total(), core0.IntegerRegisterFile.power.dynamic, core0.IntegerRegisterFile.power.leakage, core0.IntegerRegisterFile.dimension.get_area()*1e6);
    printf("core0.FloatingPointRegisterFile.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FloatingPointRegisterFile.power.get_total(), core0.FloatingPointRegisterFile.power.dynamic, core0.FloatingPointRegisterFile.power.leakage, core0.FloatingPointRegisterFile.dimension.get_area()*1e6);
    printf("core0.exeu.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.exeu.power.get_total(), core0.exeu.power.dynamic, core0.exeu.power.leakage, core0.exeu.dimension.get_area()*1e6);
    printf("core0.fp_u.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.fp_u.power.get_total(), core0.fp_u.power.dynamic, core0.fp_u.power.leakage, core0.fp_u.dimension.get_area()*1e6);
    printf("core0.mul.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.mul.power.get_total(), core0.mul.power.dynamic, core0.mul.power.leakage, core0.mul.dimension.get_area()*1e6);
    printf("core0.IntBypassData.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntBypassData.power.get_total(), core0.IntBypassData.power.dynamic, core0.IntBypassData.power.leakage, core0.IntBypassData.dimension.get_area()*1e6);
    printf("core0.IntBypassTag.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntBypassTag.power.get_total(), core0.IntBypassTag.power.dynamic, core0.IntBypassTag.power.leakage, core0.IntBypassTag.dimension.get_area()*1e6);
    printf("core0.MulBypassData.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.MulBypassData.power.get_total(), core0.MulBypassData.power.dynamic, core0.MulBypassData.power.leakage, core0.MulBypassData.dimension.get_area()*1e6);
    printf("core0.MulBypassTag.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.MulBypassTag.power.get_total(), core0.MulBypassTag.power.dynamic, core0.MulBypassTag.power.leakage, core0.MulBypassTag.dimension.get_area()*1e6);
    printf("core0.FPBypassData.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPBypassData.power.get_total(), core0.FPBypassData.power.dynamic, core0.FPBypassData.power.leakage, core0.FPBypassData.dimension.get_area()*1e6);
    printf("core0.FPBypassTag.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPBypassTag.power.get_total(), core0.FPBypassTag.power.dynamic, core0.FPBypassTag.power.leakage, core0.FPBypassTag.dimension.get_area()*1e6);
    printf("core0.IntFrontRAT.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntFrontRAT.power.get_total(), core0.IntFrontRAT.power.dynamic, core0.IntFrontRAT.power.leakage, core0.IntFrontRAT.dimension.get_area()*1e6);
    printf("core0.idcl.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.idcl.power.get_total(), core0.idcl.power.dynamic, core0.idcl.power.leakage, core0.idcl.dimension.get_area()*1e6);
    printf("core0.FPFrontRAT.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPFrontRAT.power.get_total(), core0.FPFrontRAT.power.dynamic, core0.FPFrontRAT.power.leakage, core0.FPFrontRAT.dimension.get_area()*1e6);
    printf("core0.fdcl.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.fdcl.power.get_total(), core0.fdcl.power.dynamic, core0.fdcl.power.leakage, core0.fdcl.dimension.get_area()*1e6);
    printf("core0.IntRetireRAT.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntRetireRAT.power.get_total(), core0.IntRetireRAT.power.dynamic, core0.IntRetireRAT.power.leakage, core0.IntRetireRAT.dimension.get_area()*1e6);
    printf("core0.FPRetireRAT.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPRetireRAT.power.get_total(), core0.FPRetireRAT.power.dynamic, core0.FPRetireRAT.power.leakage, core0.FPRetireRAT.dimension.get_area()*1e6);
    printf("core0.IntFreeList.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.IntFreeList.power.get_total(), core0.IntFreeList.power.dynamic, core0.IntFreeList.power.leakage, core0.IntFreeList.dimension.get_area()*1e6);
    printf("core0.FPFreeList.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.FPFreeList.power.get_total(), core0.FPFreeList.power.dynamic, core0.FPFreeList.power.leakage, core0.FPFreeList.dimension.get_area()*1e6);
    printf("core0.dcache.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.dcache.power.get_total(), core0.dcache.power.dynamic, core0.dcache.power.leakage, core0.dcache.dimension.get_area()*1e6);
    printf("core0.dcacheMissBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.dcacheMissBuffer.power.get_total(), core0.dcacheMissBuffer.power.dynamic, core0.dcacheMissBuffer.power.leakage, core0.dcacheMissBuffer.dimension.get_area()*1e6);
    printf("core0.dcacheFillBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.dcacheFillBuffer.power.get_total(), core0.dcacheFillBuffer.power.dynamic, core0.dcacheFillBuffer.power.leakage, core0.dcacheFillBuffer.dimension.get_area()*1e6);
    printf("core0.dcachePrefetchBuffer.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.dcachePrefetchBuffer.power.get_total(), core0.dcachePrefetchBuffer.power.dynamic, core0.dcachePrefetchBuffer.power.leakage, core0.dcachePrefetchBuffer.dimension.get_area()*1e6);
    printf("core0.dcacheWBB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.dcacheWBB.power.get_total(), core0.dcacheWBB.power.dynamic, core0.dcacheWBB.power.leakage, core0.dcacheWBB.dimension.get_area()*1e6);
    printf("core0.StoreQueue.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.StoreQueue.power.get_total(), core0.StoreQueue.power.dynamic, core0.StoreQueue.power.leakage, core0.StoreQueue.dimension.get_area()*1e6);
    printf("core0.LoadQueue.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.LoadQueue.power.get_total(), core0.LoadQueue.power.dynamic, core0.LoadQueue.power.leakage, core0.LoadQueue.dimension.get_area()*1e6);
    printf("core0.ITLB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.ITLB.power.get_total(), core0.ITLB.power.dynamic, core0.ITLB.power.leakage, core0.ITLB.dimension.get_area()*1e6);
    printf("core0.DTLB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.DTLB.power.get_total(), core0.DTLB.power.dynamic, core0.DTLB.power.leakage, core0.DTLB.dimension.get_area()*1e6);
    printf("core0.undiffCore.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.undiffCore.power.get_total(), core0.undiffCore.power.dynamic, core0.undiffCore.power.leakage, core0.undiffCore.dimension.get_area()*1e6);
    printf("core0.corepipe.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.corepipe.power.get_total(), core0.corepipe.power.dynamic, core0.corepipe.power.leakage, core0.corepipe.dimension.get_area()*1e6);
    printf("core0.L2cache.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2cache.power.get_total(), core0.L2cache.power.dynamic, core0.L2cache.power.leakage, core0.L2cache.dimension.get_area()*1e6);
    printf("core0.L2MissB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2MissB.power.get_total(), core0.L2MissB.power.dynamic, core0.L2MissB.power.leakage, core0.L2MissB.dimension.get_area()*1e6);
    printf("core0.L2FillB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2FillB.power.get_total(), core0.L2FillB.power.dynamic, core0.L2FillB.power.leakage, core0.L2FillB.dimension.get_area()*1e6);
    printf("core0.L2PrefetchB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2PrefetchB.power.get_total(), core0.L2PrefetchB.power.dynamic, core0.L2PrefetchB.power.leakage, core0.L2PrefetchB.dimension.get_area()*1e6);
    printf("core0.L2WBB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", core0.L2WBB.power.get_total(), core0.L2WBB.power.dynamic, core0.L2WBB.power.leakage, core0.L2WBB.dimension.get_area()*1e6);
    printf("L3.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.power.get_total(), L3.power.dynamic, L3.power.leakage, L3.dimension.get_area()*1e6);
    printf("L3.L3cache.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.L3cache.power.get_total(), L3.L3cache.power.dynamic, L3.L3cache.power.leakage, L3.L3cache.dimension.get_area()*1e6);
    printf("L3.L3MissB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.L3MissB.power.get_total(), L3.L3MissB.power.dynamic, L3.L3MissB.power.leakage, L3.L3MissB.dimension.get_area()*1e6);
    printf("L3.L3FillB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.L3FillB.power.get_total(), L3.L3FillB.power.dynamic, L3.L3FillB.power.leakage, L3.L3FillB.dimension.get_area()*1e6);
    printf("L3.L3PrefetchB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.L3PrefetchB.power.get_total(), L3.L3PrefetchB.power.dynamic, L3.L3PrefetchB.power.leakage, L3.L3PrefetchB.dimension.get_area()*1e6);
    printf("L3.L3WBB.power = %2.3lfW (dynamic = %2.3lfW, leakage = %2.3lfW), area = %2.3lfmm^2\n", L3.L3WBB.power.get_total(), L3.L3WBB.power.dynamic, L3.L3WBB.power.leakage, L3.L3WBB.dimension.get_area()*1e6);


    delete kitfox;

    return 0;
}
